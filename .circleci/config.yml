# Javascript Node CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/openjdk:11.0.2-jdk-node

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.
  release-management: salesforce/npm-release-management@3.5.1
  codecov: codecov/codecov@1.1.1

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - persist_to_workspace:
          root: ~/repo
          paths: .

#  build:
#    <<: *defaults
#    steps:
#      - checkout
#
#      # UNIT TESTS
#      - run:
#          command: |
#            if [ -n "$CIRCLE_TAG" ]
#            then
#            echo "YAY"
#            fi
#            echo "DONE"
#      - run:
#          command: |
#            if [ -n "$CIRCLE_TAG" ]
#            then
#              echo "==== Tag: $CIRCLE_TAG ====="
#              git branch -a --contains tags/$CIRCLE_TAG
#              echo "==== Tag: josh-dev-tag ====="
#              git branch -a --contains tags/josh-dev-tag
#              echo "==== Tag: v2.4.0 ====="
#              git branch -a --contains tags/v2.4.0
#              echo "===== $CIRCLE_TAG containment information ===="
#              export CONTAINED_IN_DEV=$(git branch -a --contains tags/$CIRCLE_TAG|grep dev)
#              export CONTAINED_IN_REL=$(git branch -a --contains tags/$CIRCLE_TAG|grep release)
#              if [ -n "$CONTAINED_IN_DEV" ] && [ -z "$CONTAINED_IN_REL" ]
#              then
#                echo "Contained in dev only"
#              else
#                echo "Not contained in dev only"
#              fi
#            else
#              echo "No tag"
#            fi
#      - run:
#          command: |
#            if [ -n "beep" ]
#            then
#               exit 1
#            fi
#
#      - run:
#          command: echo "This is fine"
#
  self-evaluation:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

  unpackaged-sanity:
    executor:
      name: win/default # executor type
      size: "medium"
    working_directory: C:\repo

    steps:
      # Commands are run in a Windows virtual machine environment
      - attach_workspace:
          at: C:\repo

  packaged-sanity:
    executor:
      name: win/default # executor type
      size: "medium"

    steps:
      - checkout

  auto-merge-release:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e2:99:c9:bf:d6:40:04:d6:56:48:05:eb:1a:41:f6:a4"
      - checkout
      - run:
          name: "Merge release"
          command: |
            git config user.email "isv.swat@salesforce.com"
            git config user.name "$CIRCLE_USERNAME"
            git checkout dev
            git pull origin dev
            git merge release --commit --no-edit -m "Automerge release to dev"
            git push origin dev
  publish-latest:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          name: Verify branch of origin
          command: |
            if [ -z "$CIRCLE_TAG" ]
            then
               # If we're not actually working from a tag, then just exit. We only want to deploy tags.
               exit 1
            fi
            # For these two exports, the git command is logging out every local and remote branch that contains the tag.
            # That gets piped into a grep command so we can look for specific branches in the results.
            export CONTAINED_IN_RELEASE=$(git branch -a --contains tags/$CIRCLE_TAG|grep release)
            export CONTAINED_IN_MASTER=$(git branch -a --contains tags/$CIRCLE_TAG|grep master)
            # Our typical flow is feature branch -> dev -> release -> master. We want to publish tags based on release.
            # So we'll abort if the tag isn't present in release, or if it's present in master.
            if [ -z "$CONTAINED_IN_RELEASE" ] || [ -n "$CONTAINED_IN_MASTER" ]
            then
               exit 1
            fi

      - run:
          command: echo "If we are here, then everything is fine."

workflows:
  version: 2.1
  test-publish:
    jobs:
      - build:
          filters:
            # We want this to run against all tags and branches. Branches are inclusive by default, so we don't need to
            # specify anything. But tags are exclusive by default, so we need to specify that all tags should be included.
            tags:
              only: /.*/
      - unpackaged-sanity:
          requires:
            - build
      - self-evaluation:
          requires:
            - build
      - publish-latest:
          # This job should only run after 'build' finishes successfully.
          requires:
            - build
            - self-evaluation
          filters:
            # We never want to publish branches, so we need to explicitly ignore all of them.
            branches:
              ignore: /.*/
            # We want to publish any tags that are formatted vXXXX, since that's our semantic versioning syntax.
            tags:
              only:
                /^.*/
      - packaged-sanity:
          requires:
            - publish-latest
          filters:
            # We never want to publish branches, so we need to explicitly ignore all of them.
            branches:
              ignore: /.*/
            # We want to publish any tags that are formatted vXXXX, since that's our semantic versioning syntax.
            tags:
              only:
                /^v.*/
