# Javascript Node CircleCI configuration file
#
# Check https://circleci.com/docs/2.0/language-javascript/ for more details
#
version: 2.1
defaults: &defaults
  working_directory: ~/repo
  docker:
    - image: circleci/openjdk:11.0.2-jdk-node

orbs:
  win: circleci/windows@2.2.0 # The Windows orb give you everything you need to start using the Windows executor.
  release-management: salesforce/npm-release-management@3.5.1
  codecov: codecov/codecov@1.1.1

jobs:
  build:
    <<: *defaults
    steps:
      - checkout

      # UNIT TESTS
      - run:
          command: |
            if [ -n "$CIRCLE_TAG" ]
            then
            echo "YAY"
            fi
            echo "DONE"
      - run:
          command: |
            if [ -n "$CIRCLE_TAG" ]
            then
              echo "==== Tag: $CIRCLE_TAG ====="
              git branch -a --contains tags/$CIRCLE_TAG
              echo "==== Tag: josh-dev-tag ====="
              git branch -a --contains tags/josh-dev-tag
              echo "==== Tag: v2.4.0 ====="
              git branch -a --contains tags/v2.4.0
              echo "===== $CIRCLE_TAG containment information ===="
              export CONTAINED_IN_DEV=$(git branch -a --contains tags/$CIRCLE_TAG|grep dev)
              export CONTAINED_IN_REL=$(git branch -a --contains tags/$CIRCLE_TAG|grep release)
              if [ -n "$CONTAINED_IN_DEV" ] && [ -z "$CONTAINED_IN_REL" ]
              then
                echo "Contained in dev only"
              else
                echo "Not contained in dev only"
              fi
            else
              echo "No tag"
            fi
      - run:
          command: |
            if [ -n "beep" ]
            then
               exit 1
            fi

      - run:
          command: echo "This is fine"

  some-other-job:
    <<: *defaults
    steps:
      - run:
          command: echo "We are running this second step, which might not be an okay thing to do."

  self-evaluation:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run: mkdir test-results

      - run:
          name: "list rules"
          command: bin/run scanner:rule:list

      - run:
          name: "self-evaluate"
          command: |
            bin/run scanner:run --target ./src --format junit --outfile ./test-results/src.xml --violations-cause-error
          # TODO: We'll also need to make it scan the pmd-cataloger folder once we have an easy way of making it target Java.
          # bin/run scanner:run --target ./pmd-cataloger --format junit --outfile ./test-results/pmd-cataloger.xml --violations-cause-error

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  unpackaged-sanity:
    executor:
      name: win/default # executor type
      size: "medium"
    working_directory: C:\repo

    steps:
      # Commands are run in a Windows virtual machine environment
      - attach_workspace:
          at: C:\repo

      - run: md test-results

      - run:
          name: "List rules"
          command: bin\run.cmd scanner:rule:list

      - run:
          name: "Run rules"
          working_directory: test\projects\app
          command: ..\..\..\bin\run.cmd scanner:run --target force-app --format junit --outfile ..\..\..\test-results\app.xml

      # Upload results
      - store_test_results:
          path: test-results

  packaged-sanity:
    executor:
      name: win/default # executor type
      size: "medium"

    steps:
      - checkout

      - run:
          name: "Install sfdx cli"
          shell: cmd.exe
          command: npm install -g sfdx-cli

      - run:
          name: "Install plugin"
          shell: cmd.exe
          command: echo y | sfdx plugins:install --force @salesforce/sfdx-scanner

      - run:
          name: "List rules"
          command: sfdx scanner:rule:list

      - run:
          name: "Run rules"
          working_directory: test\projects\app
          command: sfdx scanner:run --target force-app --format junit --outfile ..\..\..\test-results\app.xml

      # Upload results
      - store_test_results:
          path: test-results

  auto-merge-release:
    <<: *defaults
    steps:
      - add_ssh_keys:
          fingerprints:
            - "e2:99:c9:bf:d6:40:04:d6:56:48:05:eb:1a:41:f6:a4"
      - checkout
      - run:
          name: "Merge release"
          command: |
            git config user.email "isv.swat@salesforce.com"
            git config user.name "$CIRCLE_USERNAME"
            git checkout dev
            git pull origin dev
            git merge release --commit --no-edit -m "Automerge release to dev"
            git push origin dev
  publish-latest:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ~/repo

      - run:
          command: npm run prepack
      # Update the path so that node modules installed by the release-management orb are found
      # See https://discuss.circleci.com/t/how-to-add-a-path-to-path-in-circle-2-0/11554
      - run: echo 'export PATH=$HOME/.config/yarn/global/node_modules/.bin:$PATH' >> $BASH_ENV
      - release-management/sign
      - release-management/publish:
          access: public
          tag: latest
          use_tarfile: true
      - release-management/create-github-release

workflows:
  version: 2.1
  test-publish:
    jobs:
      - build:
          filters:
            # We want this to run against all tags and branches. Branches are inclusive by default, so we don't need to
            # specify anything. But tags are exclusive by default, so we need to specify that all tags should be included.
            tags:
              only: /.*/
      - some-other-job:
          requires:
            - build
